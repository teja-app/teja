// Mocks generated by Mockito 5.4.3 from annotations
// in swayam/test/infrastructure/managers/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:swayam/infrastructure/database/isar_collections/badge.dart'
    as _i5;
import 'package:swayam/infrastructure/database/isar_collections/mood_log.dart'
    as _i7;
import 'package:swayam/infrastructure/repositories/badge_repository.dart'
    as _i3;
import 'package:swayam/infrastructure/repositories/mood_log_repository.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BadgeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBadgeRepository extends _i1.Mock implements _i3.BadgeRepository {
  MockBadgeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i2.Isar);

  @override
  _i4.Future<void> addBadge(_i5.Badge? badge) => (super.noSuchMethod(
        Invocation.method(
          #addBadge,
          [badge],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.Badge?> getBadgeBySlug(String? slug) => (super.noSuchMethod(
        Invocation.method(
          #getBadgeBySlug,
          [slug],
        ),
        returnValue: _i4.Future<_i5.Badge?>.value(),
      ) as _i4.Future<_i5.Badge?>);

  @override
  _i4.Future<List<_i5.Badge>> getAllBadges() => (super.noSuchMethod(
        Invocation.method(
          #getAllBadges,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Badge>>.value(<_i5.Badge>[]),
      ) as _i4.Future<List<_i5.Badge>>);

  @override
  _i4.Future<void> updateBadge(_i5.Badge? badge) => (super.noSuchMethod(
        Invocation.method(
          #updateBadge,
          [badge],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteBadgeById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBadgeById,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Badge>> getBadgesByType(_i5.BadgeType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBadgesByType,
          [type],
        ),
        returnValue: _i4.Future<List<_i5.Badge>>.value(<_i5.Badge>[]),
      ) as _i4.Future<List<_i5.Badge>>);
}

/// A class which mocks [MoodLogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoodLogRepository extends _i1.Mock implements _i6.MoodLogRepository {
  MockMoodLogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Isar get isar => (super.noSuchMethod(
        Invocation.getter(#isar),
        returnValue: _FakeIsar_0(
          this,
          Invocation.getter(#isar),
        ),
      ) as _i2.Isar);

  @override
  _i4.Future<_i7.MoodLog?> getMoodLogById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMoodLogById,
          [id],
        ),
        returnValue: _i4.Future<_i7.MoodLog?>.value(),
      ) as _i4.Future<_i7.MoodLog?>);

  @override
  _i4.Future<List<_i7.MoodLog>> getAllMoodLogs() => (super.noSuchMethod(
        Invocation.method(
          #getAllMoodLogs,
          [],
        ),
        returnValue: _i4.Future<List<_i7.MoodLog>>.value(<_i7.MoodLog>[]),
      ) as _i4.Future<List<_i7.MoodLog>>);

  @override
  _i4.Future<void> addOrUpdateMoodLog(_i7.MoodLog? moodLog) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrUpdateMoodLog,
          [moodLog],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMoodLogById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMoodLogById,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateFeelingsForMoodLog(
    String? moodLogId,
    List<_i7.MoodLogFeeling>? updatedFeelings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFeelingsForMoodLog,
          [
            moodLogId,
            updatedFeelings,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i7.MoodLog?> getTodaysMoodLog() => (super.noSuchMethod(
        Invocation.method(
          #getTodaysMoodLog,
          [],
        ),
        returnValue: _i4.Future<_i7.MoodLog?>.value(),
      ) as _i4.Future<_i7.MoodLog?>);

  @override
  _i4.Future<List<_i7.MoodLog>> getMoodLogsInDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoodLogsInDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i4.Future<List<_i7.MoodLog>>.value(<_i7.MoodLog>[]),
      ) as _i4.Future<List<_i7.MoodLog>>);

  @override
  _i4.Future<_i7.MoodLog?> getMoodLogByDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoodLogByDate,
          [date],
        ),
        returnValue: _i4.Future<_i7.MoodLog?>.value(),
      ) as _i4.Future<_i7.MoodLog?>);

  @override
  _i4.Future<int> calculateCurrentStreak() => (super.noSuchMethod(
        Invocation.method(
          #calculateCurrentStreak,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
